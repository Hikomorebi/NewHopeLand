# -*- coding: utf-8 -*-

import os
from openai import OpenAI

# 设置环境变量（仅在当前脚本运行期间有效）
os.environ["OPENAI_API_KEY"] = "sk-ed6f835c5fb646eb9ef3911629ccc153"

# 创建 OpenAI 客户端
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url="https://dashscope.aliyuncs.com/compatible-mode/v1"
)
model = 'deepseek-v3'

# 定义数据表
tables_info = {
    "fdc_ads.ads_salesreport_subscranalyse_a_min": {
        "description": "经营分析认购分析表。用于分析不同组织的认购情况，包括认购未签金额、认购未签套数、认购转签约周期、和首访到认购套数等数据，帮助企业了解各组织的认购绩效和趋势。",
        "fields": [
            "统计日期", "组织类型", "组织编码", "组织名称", "时间范围编码","认购未签金额", "认购未签金额权益后", "认购未签约套数", "认购转签约套数","认购转签约平均周期", "首访到认购套数", "首访到认购平均周期"
        ]
    },
    "fdc_ads.ads_salesreport_visitweekanalyse_a_min": {
        "description": "经营分析来访周度分析表。主要用于帮助管理层分析了解客户流量和销售机会。",
        "fields": [
            "统计日期", "组织类型", "组织编码", "组织名称", "通路", "周期类型","总来访", "首访", "复访", "新增认购"
        ]
    },
    "fdc_dws.dws_proj_projplansum_a_h": {
        "description": "项目计划汇总表。用于汇总和分析各项目的计划签约和回款情况，包括月度、季度和年度的计划数据，支持项目管理和目标达成情况评估。",
        "fields": [
            "统计日期", "城市编码", "城市名称", "项目编码", "项目名称",
            "每月计划签约金额", "每季度计划签约金额", "年计划签约金额",
            "每月计划回款金额", "每季度计划回款金额", "年计划回款金额",
            "ETL时间", "分区日期", "每月计划签约面积", "每月计划签约套数",
            "每季度计划签约面积", "每季度计划签约套数", "本年计划签约面积",
            "本年计划签约套数", "年份", "每月计划签约金额_权益后",
            "每季度计划签约金额_权益后", "年度计划签约金额_权益后",
            "每月计划回款金额_权益后", "每季度计划回款金额_权益后",
            "年度计划回款金额_权益后"
        ]
    },
    "fdc_dws.dws_proj_room_totalsale_a_min": {
        "description": "房间业绩统计表。不包含“建筑面积”字段。用于详细统计房间销售业绩，包括小订、新认购和签约的各时间段数据，帮助销售团队跟踪业绩并制定销售策略。",
        "fields": [
            "统计日期", "事业部编码", "事业部名称", "城市编码", "城市名称", "项目编码", "项目名称",
            "楼栋编码", "楼栋名称", "房间编码", "房间名称", "当日小订套数", "当日小订金额",
            "当日小订金额_权益后", "当周小订套数", "当周小订金额", "当周小订金额_权益后",
            "当月小订套数", "当月小订金额", "当月小订金额_权益后", "当季小订套数",
            "当季小订金额", "当季小订金额_权益后", "当年小订套数", "当年小订金额",
            "当年小订金额_权益后", "累计小订套数", "累计小订金额", "累计小订金额_权益后",
            "当日新认购套数", "当日新认购面积", "当日新认购金额", "当日新认购金额_权益后",
            "当周新认购套数", "当周新认购面积", "当周新认购金额", "当周新认购金额_权益后",
            "当月新认购套数", "当月新认购面积", "当月新认购金额", "当月新认购金额_权益后",
            "当季新认购套数", "当季新认购面积", "当季新认购金额", "当季新认购金额_权益后",
            "当年新认购套数", "当年新认购面积", "当年新认购金额", "当年新认购金额_权益后",
            "累计新认购套数", "累计新认购面积", "累计新认购金额", "累计新认购金额_权益后",
            "累计认购套数", "累计认购面积", "累计认购金额", "累计认购金额_权益后",
            "当日认购未签约套数", "当日认购未签约面积", "当日认购未签约金额",
            "当日认购未签约金额_权益后", "当周认购未签约套数", "当周认购未签约面积",
            "当周认购未签约金额", "当周认购未签约金额_权益后", "当月认购未签约套数",
            "当月认购未签约面积", "当月认购未签约金额", "当月认购未签约金额_权益后",
            "当季认购未签约套数", "当季认购未签约面积", "当季认购未签约金额",
            "当季认购未签约金额_权益后", "当年认购未签约套数", "当年认购未签约面积",
            "当年认购未签约金额", "当年认购未签约金额_权益后", "累计认购未签约套数",
            "累计认购未签约面积", "累计认购未签约金额", "累计认购未签约金额_权益后",
            "当日新签约套数", "当日新签约面积", "当日新签约金额", "当日新签约金额_权益后",
            "当周新签约套数", "当周新签约面积", "当周新签约金额", "当周新签约金额_权益后",
            "当月新签约套数", "当月新签约面积", "当月新签约金额", "当月新签约金额_权益后",
            "当季新签约套数", "当季新签约面积", "当季新签约金额", "当季新签约金额_权益后",
            "当年新签约套数", "当年新签约面积", "当年新签约金额", "当年新签约金额_权益后",
            "累计签约套数", "累计签约面积", "累计签约金额", "累计签约金额_权益后",
            "当日签约回款", "当日签约回款_权益后", "往日签约回款", "往日签约回款_权益后",
            "当周签约回款", "当周签约回款_权益后", "往周签约回款", "往周签约回款_权益后",
            "当月签约回款", "当月签约回款_权益后", "往月签约回款", "往月签约回款_权益后",
            "当季签约回款", "当季签约回款_权益后", "往季签约回款", "往季签约回款_权益后",
            "当年签约回款", "当年签约回款_权益后", "往年签约回款", "往年签约回款_权益后",
            "累计回款金额", "累计回款金额_权益后", "累计应收金额", "累计应收金额_权益后",
            "认购退房套数", "认购退房面积", "认购退房金额", "认购退房金额_权益后",
            "认购换房套数", "认购换房面积", "认购换房金额", "认购换房金额_权益后",
            "签约退房套数", "签约退房面积", "签约退房金额", "签约退房金额_权益后",
            "签约换房套数", "签约换房面积", "签约换房金额", "签约换房金额_权益后"
        ]
    },
    "fdc_dwd.dwd_cust_custvisitflow_a_min": {
        "description": "案场客户来访流水表。记录客户来访的详细信息，包括客户身份和来访日期等数据，支持客户关系管理和销售机会追踪。",
        "fields": [
            "数据日期", "城市编码", "城市名称", "项目编码", "项目名称", "来访ID", "销售客户关系表ID",
            "中介报备表ID", "客户名称", "手机号", "置业顾问OA账户", "中介OPENID", "一级渠道ID", "二级渠道ID",
            "渠道名称", "来访日期", "来访人数", "是否来访过", "ETL时间", "工区日期", "销售机会ID",
            "成交途径", "置业顾问姓名"
        ]
    },
    "fdc_dwd.dwd_trade_roomreceivable_a_min": {
        "description": "应收明细表。详细记录每个房间的应收款情况，包括应收金额和状态等数据，帮助财务部门进行应收款管理和账款追踪。",
        "fields": [
            "房间编码", "房间名称", "房间全称", "楼栋编码", "楼栋名称", "楼栋全称", "分期编码",
            "分期名称", "项目编码", "项目名称", "业态编码", "业态全称", "业态名称", "城市公司编码",
            "城市公司名称", "法人公司编码", "法人公司名称", "应收款编码", "销售单编码", "认购编码",
            "合同编码", "应收日期", "款项类型", "款项名称", "款项状态", "应收金额（含税）",
            "应收金额（不含税）", "应收余额", "多收金额", "分区日期", "合同应收日期"
        ]
    },
    "fdc_dwd.dwd_trade_roomsign_a_min": {
        "description": "签约明细表。记录房间的签约信息，包括合同详情和客户信息，支持合同管理和销售分析。",
        "fields": [
            "房间编码", "房间名称", "房间全称", "楼栋编码", "楼栋名称", "楼栋全称", "分期编码",
            "分期名称", "项目编码", "项目名称", "业态编码", "业态全称", "业态名称", "城市公司编码",
            "城市公司名称", "法人公司编码", "法人公司名称", "置业顾问编码", "置业顾问名称", "合同编码",
            "合同号", "销售单编码", "来访编码", "认购编码", "客户编码", "客户名称", "客户类型",
            "计价方式", "付款方式", "付款方式类别", "合同备案号", "签约日期", "认购日期", "网签日期",
            "备案日期", "合同状态", "面积状态", "建筑面积", "套内面积", "建筑单价", "套内单价",
            "建筑成交单价", "套内成交单价", "合同总价", "装修付款方式", "装修款是否并入合同",
            "装修标准", "装修单价", "初装修改造费", "装修总价", "附属款", "按揭银行", "按揭贷款额",
            "按揭年限", "公积金银行", "公积金贷款额", "公积金年限", "折扣", "折扣说明", "推荐人",
            "业务员oa号", "业务员", "关闭日期", "关闭原因", "修改日期", "客户来源", "是否首付分期",
            "签约统计日期", "实际补差款", "补差款审核时间", "溢价款", "分区日期", "置业顾问ids",
            "标准总价", "按揭记录", "变更前合同编码", "按揭银行", "返现"
        ]
    },
    "fdc_dwd.dwd_trade_roomsmsubscr_a_min": {
        "description": "房间小订信息表。记录房间的小订信息，包括认购金额和客户信息，帮助销售团队跟踪小订情况和客户需求。",
        "fields": [
            "房间编码", "房间名称", "房间全称", "楼栋编码", "楼栋名称", "楼栋全称", "分期编码",
            "分期名称", "项目编码", "项目名称", "业态编码", "业态全称", "业态名称", "城市公司编码",
            "城市公司名称", "法人公司编码", "法人公司名称", "认购编码", "销售单编码", "来访编码",
            "客户编码", "客户名称", "客户类型", "订单类型", "计价方式", "付款方式", "付款方式类别",
            "认购状态", "面积状态", "认购日期", "认购金额", "建筑面积", "套内面积", "建筑单价",
            "套内单价", "建筑成交单价", "套内成交单价", "装修款是否并入合同", "装修标准", "装修单价",
            "装修总价", "协议总价（税额）", "协议总价（不含税）", "按揭银行", "按揭贷款额", "按揭年限",
            "公积金银行", "公积金贷款额", "公积金年限", "折扣", "折扣说明", "推荐人", "业务员oa号",
            "业务员", "关闭日期", "关闭原因", "修改日期", "客户来源", "来访日期", "认购统计日期",
            "上次协议编码", "交易状态", "交易关闭原因", "失效日期", "分区日期"
        ]
    },
    "fdc_dwd.dwd_trade_roomsubscr_a_min": {
        "description": "认购明细表。记录房间的认购信息，包括认购金额、建筑面积和客户信息，支持销售管理和认购情况分析。",
        "fields": [
            "房间编码", "房间名称", "房间全称", "楼栋编码", "楼栋名称", "楼栋全称", "分期编码",
            "分期名称", "项目编码", "项目名称", "业态编码", "业态全称", "业态名称", "城市公司编码",
            "城市公司名称", "法人公司编码", "法人公司名称", "认购编码", "销售单编码", "来访编码",
            "客户编码", "客户名称", "客户类型", "订单类型", "计价方式", "付款方式", "付款方式类别",
            "认购状态", "面积状态", "认购日期", "认购金额", "建筑面积", "套内面积", "建筑单价",
            "套内单价", "建筑成交单价", "套内成交单价", "装修款是否并入合同", "装修标准", "装修单价",
            "装修总价", "协议总价（税额）", "协议总价（不含税）", "按揭银行", "按揭贷款额", "按揭年限",
            "公积金银行", "公积金贷款额", "公积金年限", "折扣", "折扣说明", "推荐人", "业务员oa号",
            "业务员", "关闭日期", "关闭原因", "修改日期", "客户来源", "来访日期", "认购统计日期",
            "上次协议编码", "交易状态", "交易关闭原因", "分区日期", "置业顾问ids", "失效日期",
            "标准总价", "变更前认购编码"
        ]
    }
}


def select_table_based_on_query(query, tables_info = tables_info, client = client, model = model):
    # 构建思维链 prompt
    prompt = f"基于用户的查询，选择最相关的一个数据表以进行数据检索：\n\n查询：{query}\n\n数据表信息：\n"
    for table_name, info in tables_info.items():
        prompt += f"\n数据表名称：{table_name}\n数据表描述：{info['description']}数据表包含的字段：{info['fields']}\n"

    prompt += "\n请基于以下步骤来选择适合的数据表：\n"
    prompt += "1. 分析查询中涉及的主要信息（例如：所需的信息字段）。\n"
    prompt += "2. 请根据每个数据表的字段信息，判断查询所需的信息字段是否存在，选择那些包含完全一致的字段的表。\n"
    prompt += "3. 根据数据表描述信息和数据表名称，从选择出的表格中二次筛选出最合适的一个表格\n"
    prompt += "4. 以数据表名称的形式返回选择的数据表。\n"

    prompt += "\n请按照上述步骤来选择适合的数据表。但无需解释原因，只需以数据表名称输出选择的数据表"

    # 调用大模型 API
    try:
        response = client.chat.completions.create(
            model=model,  # 使用合适的大模型
            messages=[{"role": "user", "content": prompt}]
        )

        # 获取返回的表格选择
        selected_tables = response.choices[0].message.content.strip()

        # 规范化处理，将表名按照前缀分类
        if selected_tables:
            selected_tables_list = selected_tables.split("\n")  # 假设返回值为换行分隔的表名列表
            table_dict = {}

            for table in selected_tables_list:
                table = table.strip()  # 去掉可能的空格
                if table:
                    # 提取表名前缀和表名
                    prefix, table_name = table.split('.', 1)  # 获取点号前的前缀，点号后的部分为表名
                    if prefix not in table_dict:
                        table_dict[prefix] = []
                    table_dict[prefix].append(table_name)  # 只添加表名部分，不包括前缀

            return table_dict

        return None

    except Exception as e:
        print(f"调用 API 时出错: {e}")
        return None




